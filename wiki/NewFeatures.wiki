#summary A summary of the new features available in flam3 3.0

The last major release of flam3 was in 2006, and since there has been a lot of development behind the scenes of features and improvements.  Here's a summary of what has been added over the last few years.


== Highlight Power ==

A long-standing bug in the way that the output color is calculated has been fixed, and a new render tweak setting is now available to adjust the behavior of flam3.  Here's a picture of the problem:

http://dl.dropbox.com/u/108435/flam3_wiki/2229.hlm1.png

See that bright yellow spot at the top of the rounded shape?  That color actually isn't in the palette.  It's a result of clipping each color coordinate separately in regions of high iteration density.  This is why, for a long time, RGBCMY colors have tended to dominate high-density areas of flame renders.  The solution is to keep the color vector pointing the same direction until it begins to saturate, and then trend the color towards white as the number of iterations continues to increase. The attribute 'highlight_power' in a genome's flame element controls how fast the color converges to white.  highlight_power interpolates just like other parameters in the flame, and defaults to -1, which is the old 2.7 behaviour.  Changing the highlight_power to 1.0 results in the following image:

http://dl.dropbox.com/u/108435/flam3_wiki/2229.hl10.png

Yuk.  Notice that the vivid red color is now trending towards white for the entire shape, resulting in a pink hue.  Let's drop the highlight_power to 0.4.

http://dl.dropbox.com/u/108435/flam3_wiki/2229.hl04.png

Much better.  Note that setting highlight_power to 0 will prevent any saturated areas from trending towards white, essentially capping saturated areas to a color with saturation 255 in the HSV colorspace.

The highlight_power setting can be edited manually, or experimented with using the fractal fr0st flame editor on the Adjust tab.

== Early Clip Mode ==

In the flam3 2.7 code, when applying the spatial filter to the supersampled image, the values in the supersampled image are in log-scaled units, and can be very small or very large.  Applying a filter kernel to log density data before converting it to RGB can have some potential problems, as the following image shows:

http://dl.dropbox.com/u/108435/flam3_wiki/23652_ec_off.png

See the jaggies on the bright spokes on the left side of the image?  The spokes are very dense, and so applying the spatial filter to the log density data blurs the spokes, but the blurred areas are also bright enough to saturate, and we are left with a wider, but not smoother, swath of iterations.  However, if we clip the color information prior to the spatial filter application, we get a very different image.  This is, in essence, rendering the image very large with no supersampling, and resizing in an external program like Photoshop or Irfanview.

http://dl.dropbox.com/u/108435/flam3_wiki/23652_ec_on.png

The lines are much smoother - but they're dimmer, too.  You can't easily have it both ways.  That said, look at the results when the image is rendered with both early clip mode AND highlight_power = 1.5 :

http://dl.dropbox.com/u/108435/flam3_wiki/23652_ec_hl.png

This is a much more acceptable image, at least to me.  The cyan saturation has gone away, revealing more detail & structure.

Enabling early clip mode is done on the command-line, by setting the env var 'earlyclip' to 1.  There is also a checkbox in fr0st that allows the use of early clip mode in the render dialog.